Index: src/test/java/ru/javawebinar/topjava/service/AbstractServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/service/AbstractServiceTest.java	(revision 670ef1a3099c09a1fe5dae2c1778cfe93bd00669)
+++ src/test/java/ru/javawebinar/topjava/service/AbstractServiceTest.java	(date 1593708204129)
@@ -1,21 +1,17 @@
 package ru.javawebinar.topjava.service;
 
-import org.junit.AfterClass;
+import org.junit.ClassRule;
 import org.junit.Rule;
+import org.junit.rules.ExternalResource;
 import org.junit.rules.Stopwatch;
-import org.junit.runner.Description;
 import org.junit.runner.RunWith;
-import org.slf4j.Logger;
 import org.springframework.test.context.ActiveProfiles;
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.jdbc.Sql;
 import org.springframework.test.context.jdbc.SqlConfig;
 import org.springframework.test.context.junit4.SpringRunner;
 import ru.javawebinar.topjava.ActiveDbProfileResolver;
-
-import java.util.concurrent.TimeUnit;
-
-import static org.slf4j.LoggerFactory.getLogger;
+import ru.javawebinar.topjava.TimingRules;
 
 @ContextConfiguration({
         "classpath:spring/spring-app.xml",
@@ -25,30 +21,9 @@
 @Sql(scripts = "classpath:db/populateDB.sql", config = @SqlConfig(encoding = "UTF-8"))
 @ActiveProfiles(resolver = ActiveDbProfileResolver.class)
 abstract public class AbstractServiceTest {
-    private static final Logger log = getLogger("result");
-
-    private static final StringBuilder results = new StringBuilder();
+    @ClassRule
+    public static ExternalResource summary = TimingRules.SUMMARY;
 
     @Rule
-    // http://stackoverflow.com/questions/14892125/what-is-the-best-practice-to-determine-the-execution-time-of-the-bussiness-relev
-    public Stopwatch stopwatch = new Stopwatch() {
-        @Override
-        protected void finished(long nanos, Description description) {
-            String result = String.format("%-95s %7d", description.getDisplayName(), TimeUnit.NANOSECONDS.toMillis(nanos));
-            results.append(result).append('\n');
-            log.info(result + " ms\n");
-        }
-    };
-
-
-    //    https://dzone.com/articles/applying-new-jdk-11-string-methods
-    private static final String DELIM = "-".repeat(103);
-
-    @AfterClass
-    public static void printResult() {
-        log.info("\n" + DELIM +
-                "\nTest                                                                                       Duration, ms" +
-                "\n" + DELIM + "\n" + results + DELIM + "\n");
-        results.setLength(0);
-    }
+    public Stopwatch stopwatch = TimingRules.STOPWATCH;
 }
\ No newline at end of file
Index: src/test/java/ru/javawebinar/topjava/TimingRules.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/TimingRules.java	(date 1593708425923)
+++ src/test/java/ru/javawebinar/topjava/TimingRules.java	(date 1593708425923)
@@ -0,0 +1,42 @@
+package ru.javawebinar.topjava;
+
+import org.junit.rules.ExternalResource;
+import org.junit.rules.Stopwatch;
+import org.junit.runner.Description;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.concurrent.TimeUnit;
+
+public class TimingRules {
+    private static final Logger log = LoggerFactory.getLogger("result");
+
+    private static final StringBuilder results = new StringBuilder();
+
+    // http://stackoverflow.com/questions/14892125/what-is-the-best-practice-to-determine-the-execution-time-of-the-bussiness-relev
+    public static final Stopwatch STOPWATCH = new Stopwatch() {
+        @Override
+        protected void finished(long nanos, Description description) {
+            String result = String.format("%-95s %7d", description.getDisplayName(), TimeUnit.NANOSECONDS.toMillis(nanos));
+            results.append(result).append('\n');
+            log.info(result + " ms\n");
+        }
+    };
+
+    //    https://dzone.com/articles/applying-new-jdk-11-string-methods
+    private static final String DELIM = "-".repeat(103);
+
+    public static final ExternalResource SUMMARY = new ExternalResource() {
+        @Override
+        protected void before() throws Throwable {
+            results.setLength(0);
+        }
+
+        @Override
+        protected void after() {
+            log.info("\n" + DELIM +
+                    "\nTest                                                                                       Duration, ms" +
+                    "\n" + DELIM + "\n" + results + DELIM + "\n");
+        }
+    };
+}
