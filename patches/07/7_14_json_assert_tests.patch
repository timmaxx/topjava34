Subject: [PATCH] 7_14_json_assert_tests
---
Index: src/main/resources/spring/spring-mvc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/spring/spring-mvc.xml b/src/main/resources/spring/spring-mvc.xml
--- a/src/main/resources/spring/spring-mvc.xml	(revision 7f3cc49b9d2acd3618b8ee613b5d4a545b27247c)
+++ b/src/main/resources/spring/spring-mvc.xml	(date 1721883486737)
@@ -5,17 +5,16 @@
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
 
+    <bean class="ru.javawebinar.topjava.web.json.JacksonObjectMapper" id="objectMapper" factory-method="getMapper"/>
+
     <mvc:annotation-driven>
         <mvc:message-converters>
             <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
-                <property name="objectMapper">
-                    <bean class="ru.javawebinar.topjava.web.json.JacksonObjectMapper"/>
-                </property>
+                <property name="objectMapper" ref="objectMapper"/>
             </bean>
         </mvc:message-converters>
     </mvc:annotation-driven>
 
-
     <context:component-scan base-package="ru.javawebinar.**.web"/>
 
     <!--  all resources inside folder src/main/webapp/resources are mapped so they can be referred to inside JSP files -->
Index: src/main/java/ru/javawebinar/topjava/web/json/JacksonObjectMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/javawebinar/topjava/web/json/JacksonObjectMapper.java b/src/main/java/ru/javawebinar/topjava/web/json/JacksonObjectMapper.java
--- a/src/main/java/ru/javawebinar/topjava/web/json/JacksonObjectMapper.java	(revision 7f3cc49b9d2acd3618b8ee613b5d4a545b27247c)
+++ b/src/main/java/ru/javawebinar/topjava/web/json/JacksonObjectMapper.java	(date 1721883486723)
@@ -18,6 +18,8 @@
  */
 public class JacksonObjectMapper extends ObjectMapper {
 
+    private static final ObjectMapper MAPPER = new JacksonObjectMapper();
+
     private JacksonObjectMapper() {
         registerModule(new Hibernate5Module());
 
@@ -28,4 +30,8 @@
         setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY);
         setSerializationInclusion(JsonInclude.Include.NON_NULL);
     }
+
+    public static ObjectMapper getMapper() {
+        return MAPPER;
+    }
 }
\ No newline at end of file
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 7f3cc49b9d2acd3618b8ee613b5d4a545b27247c)
+++ b/pom.xml	(date 1721883546752)
@@ -38,6 +38,7 @@
         <junit.jupiter.version>5.10.2</junit.jupiter.version>
         <assertj.version>3.26.0</assertj.version>
         <hamcrest.version>1.3</hamcrest.version>
+        <jsonassert.version>1.5.3</jsonassert.version>
     </properties>
 
     <build>
@@ -252,6 +253,13 @@
             <version>${hamcrest.version}</version>
             <scope>test</scope>
         </dependency>
+        <dependency>
+            <groupId>org.skyscreamer</groupId>
+            <artifactId>jsonassert</artifactId>
+            <version>${jsonassert.version}</version>
+            <scope>test</scope>
+        </dependency>
+
         <dependency>
             <groupId>org.springframework</groupId>
             <artifactId>spring-test</artifactId>
Index: src/test/java/ru/javawebinar/topjava/web/user/AdminRestControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/ru/javawebinar/topjava/web/user/AdminRestControllerTest.java b/src/test/java/ru/javawebinar/topjava/web/user/AdminRestControllerTest.java
--- a/src/test/java/ru/javawebinar/topjava/web/user/AdminRestControllerTest.java	(revision 7f3cc49b9d2acd3618b8ee613b5d4a545b27247c)
+++ b/src/test/java/ru/javawebinar/topjava/web/user/AdminRestControllerTest.java	(date 1721883486754)
@@ -9,6 +9,8 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 import static ru.javawebinar.topjava.UserTestData.ADMIN_ID;
+import static ru.javawebinar.topjava.UserTestData.admin;
+import static ru.javawebinar.topjava.web.json.JsonUtil.writeIgnoreProps;
 
 class AdminRestControllerTest extends AbstractControllerTest {
 
@@ -20,6 +22,7 @@
                 .andExpect(status().isOk())
                 .andDo(print())
                 // https://jira.spring.io/browse/SPR-14472
-                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON));
+                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
+                .andExpect(content().json(writeIgnoreProps(admin, "registered")));
     }
 }
\ No newline at end of file
Index: src/main/java/ru/javawebinar/topjava/web/json/JsonUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/javawebinar/topjava/web/json/JsonUtil.java b/src/main/java/ru/javawebinar/topjava/web/json/JsonUtil.java
new file mode 100644
--- /dev/null	(date 1721883486730)
+++ b/src/main/java/ru/javawebinar/topjava/web/json/JsonUtil.java	(date 1721883486730)
@@ -0,0 +1,46 @@
+package ru.javawebinar.topjava.web.json;
+
+import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.ObjectReader;
+
+import java.io.IOException;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import static ru.javawebinar.topjava.web.json.JacksonObjectMapper.getMapper;
+
+public class JsonUtil {
+
+    public static <T> List<T> readValues(String json, Class<T> clazz) {
+        ObjectReader reader = getMapper().readerFor(clazz);
+        try {
+            return reader.<T>readValues(json).readAll();
+        } catch (IOException e) {
+            throw new IllegalArgumentException("Invalid read array from JSON:\n'" + json + "'", e);
+        }
+    }
+
+    public static <T> T readValue(String json, Class<T> clazz) {
+        try {
+            return getMapper().readValue(json, clazz);
+        } catch (IOException e) {
+            throw new IllegalArgumentException("Invalid read from JSON:\n'" + json + "'", e);
+        }
+    }
+
+    public static <T> String writeValue(T obj) {
+        try {
+            return getMapper().writeValueAsString(obj);
+        } catch (JsonProcessingException e) {
+            throw new IllegalStateException("Invalid write to JSON:\n'" + obj + "'", e);
+        }
+    }
+
+    public static <T> String writeIgnoreProps(T obj, String... ignoreProps) {
+        Map<String, Object> map = getMapper().convertValue(obj, new TypeReference<>() {});
+        map.keySet().removeAll(Set.of(ignoreProps));
+        return writeValue(map);
+    }
+}
\ No newline at end of file
Index: src/test/java/ru/javawebinar/topjava/web/json/JsonUtilTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/ru/javawebinar/topjava/web/json/JsonUtilTest.java b/src/test/java/ru/javawebinar/topjava/web/json/JsonUtilTest.java
new file mode 100644
--- /dev/null	(date 1721883486744)
+++ b/src/test/java/ru/javawebinar/topjava/web/json/JsonUtilTest.java	(date 1721883486744)
@@ -0,0 +1,30 @@
+package ru.javawebinar.topjava.web.json;
+
+import org.junit.jupiter.api.Test;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import ru.javawebinar.topjava.model.Meal;
+
+import java.util.List;
+
+import static ru.javawebinar.topjava.MealTestData.*;
+
+class JsonUtilTest {
+    private static final Logger log = LoggerFactory.getLogger(JsonUtilTest.class);
+
+    @Test
+    void readWriteValue() {
+        String json = JsonUtil.writeValue(adminMeal1);
+        log.info(json);
+        Meal meal = JsonUtil.readValue(json, Meal.class);
+        MEAL_MATCHER.assertMatch(meal, adminMeal1);
+    }
+
+    @Test
+    void readWriteValues() {
+        String json = JsonUtil.writeValue(meals);
+        log.info(json);
+        List<Meal> actual = JsonUtil.readValues(json, Meal.class);
+        MEAL_MATCHER.assertMatch(actual, meals);
+    }
+}
\ No newline at end of file
